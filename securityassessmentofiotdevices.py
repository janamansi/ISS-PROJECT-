# -*- coding: utf-8 -*-
"""SecurityAssessmentOfIOTDevices.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e1LU5PMg9pNNeWt6VK7okZKY0cmT9Kh-
"""

!pip install aiocoap
!apt-get update -qq
!apt-get install -y nmap -qq
!pip install python-nmap

import os
import hashlib
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import socket
import threading
import time
import asyncio
from cryptography.fernet import Fernet
from aiocoap import resource, Message, Context
import nmap

#Setup Secure Login Files
os.makedirs("/mnt/data/simulated_camera", exist_ok=True)

password_plain = "SecurePass123"
password_hashed = hashlib.sha256(password_plain.encode()).hexdigest()

login_page = f"""
<html>
<head><title>Camera Secure Login</title></head>
<body>
<h2>Smart Camera Secure Login</h2>
<form action="/login" method="post">
    Username: <input type="text" name="username"><br>
    Password: <input type="password" name="password"><br>
    <input type="submit" value="Login">
</form>
<!-- Password SHA-256 hash: {password_hashed} -->
</body>
</html>
"""
with open("/mnt/data/simulated_camera/index.html", "w") as f:
    f.write(login_page)

with open("/mnt/data/simulated_camera/passwd.txt", "w") as f:
    f.write(f"admin:{password_hashed}\n")

with open("/mnt/data/simulated_camera/private_key.pem", "w") as f:
    f.write("-----BEGIN PRIVATE KEY-----\nMIIBVwIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEA...\n-----END PRIVATE KEY-----")

print("Secure simulation files created.")

#Encrypt sensitive files
key = Fernet.generate_key()
cipher = Fernet(key)

key_path = "/mnt/data/encryption_key.key"
with open(key_path, "wb") as f:
    f.write(key)

passwd_path = "/mnt/data/simulated_camera/passwd.txt"
with open(passwd_path, "rb") as f:
    data = f.read()
with open(passwd_path, "wb") as f:
    f.write(cipher.encrypt(data))

private_key_path = "/mnt/data/simulated_camera/private_key.pem"
with open(private_key_path, "rb") as f:
    data = f.read()
with open(private_key_path, "wb") as f:
    f.write(cipher.encrypt(data))

print("Sensitive files encrypted.")

#CoAP Server Simulation
DEVICE_IPV6_ADDRESS = "fe80::1"
print(f"Simulated IoT Camera IPv6 Address (6LoWPAN): {DEVICE_IPV6_ADDRESS}")

class CameraResource(resource.Resource):
    async def render_get(self, request):
        payload = b"Hello from Smart Camera (CoAP Simulation)!"
        return Message(payload=payload)

async def start_coap_server():
    root = resource.Site()
    root.add_resource(['camera'], CameraResource())
    await Context.create_server_context(root)
    print("CoAP Server running on coap://[::1]/camera (localhost IPv6)")
    await asyncio.sleep(60)

loop = asyncio.get_event_loop()
loop.create_task(start_coap_server())

#Simulate Vulnerable Services
def dummy_listener(port):
    s = socket.socket()
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind(("127.0.0.1", port))
    s.listen(1)
    print(f"Simulated service running on port {port}")
    while True:
        conn, _ = s.accept()
        conn.close()

dummy_ports = [21, 80, 554, 445, 8000,5000]
for p in dummy_ports:
    threading.Thread(target=dummy_listener, args=(p,), daemon=True).start()

time.sleep(3)

#Perform Nmap Scan
nm = nmap.PortScanner()
nm.scan("127.0.0.1", '1-10000', arguments='-sV')

nmap_results_path = "/mnt/data/nmap_scan_results.txt"
with open(nmap_results_path, "w") as f:
    for proto in nm["127.0.0.1"].all_protocols():
        for port in nm["127.0.0.1"][proto]:
            service = nm["127.0.0.1"][proto][port]['name']
            product = nm["127.0.0.1"][proto][port].get('product', 'unknown')
            version = nm["127.0.0.1"][proto][port].get('version', 'unknown')
            f.write(f"Port {port}: Service={service}, Product={product}, Version={version}\n")

print("Nmap scan completed.")

severity_scale = list(range(1, 6))
likelihood_scale = list(range(1, 6))
risk_score_matrix = np.zeros((5, 5))

for i, likelihood in enumerate(likelihood_scale):
    for j, impact in enumerate(impact_scale):
        risk_score_matrix[4 - i, j] = likelihood * impact

plt.figure(figsize=(10, 6))
sns.heatmap(
    risk_score_matrix,
    annot=True,
    fmt=".0f",
    cmap="RdYlGn_r",
    cbar=False,
    linewidths=0.5,
    annot_kws={"fontsize": 10}
)

plt.xticks(np.arange(5) + 0.5, impact_scale, rotation=0, fontsize=11)
plt.yticks(np.arange(5) + 0.5, likelihood_scale[::-1], rotation=0, fontsize=11)

plt.title("Risk Heatmap", fontsize=16)
plt.xlabel("Severity", fontsize=12)
plt.ylabel("Likelihood", fontsize=12)

plt.tight_layout()
plt.show()

#Dynamic Severity Chart from Risk Matrix Scores
open_ports_info = [port for proto in nm["127.0.0.1"].all_protocols() for port in nm["127.0.0.1"][proto]]
severity_counts = {"Low": 0, "Medium": 0, "High": 0, "Severe": 0, "Critical": 0}

for port in open_ports_info:
    if port in risk_knowledge_base:
        _, sev, lik = risk_knowledge_base[port]
    else:
        sev, lik = 3, 3
    score = sev * lik
    level = get_risk_level(score)
    severity_counts[level] += 1

# Plotting
color_map = {
    "Low": "green",
    "Medium": "orange",
    "High": "darkorange",
    "Severe": "red",
    "Critical": "darkred"
}

plt.figure(figsize=(8, 5))
plt.bar(severity_counts.keys(), severity_counts.values(),
        color=[color_map[k] for k in severity_counts.keys()])
plt.title("Detected Vulnerabilities by Risk Level")
plt.xlabel("Risk Level")
plt.ylabel("Number of Ports")
plt.grid(True)

severity_chart_path = "/mnt/data/vulnerability_severity_chart_dynamic.png"
plt.savefig(severity_chart_path)
plt.show()

